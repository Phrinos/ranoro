rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Funciones de Ayuda ---
    // Función para verificar si un usuario está autenticado.
    function isSignedIn() {
      return request.auth != null;
    }

    // Función para obtener los datos del perfil del usuario que hace la solicitud.
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Función para obtener los permisos del rol del usuario.
    function getUserPermissions() {
      // Asumimos que el rol del usuario (ej. "Técnico") es el ID del documento en appRoles.
      return get(/databases/$(database)/documents/appRoles/$(getUserData().role)).data.permissions;
    }

    // Función principal de seguridad: verifica si el usuario tiene un permiso específico.
    function hasPermission(permission) {
      return isSignedIn() && permission in getUserPermissions();
    }
    
    // --- Reglas por Colección ---

    // Usuarios: Solo puedes editar tu propio perfil.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    // Roles: Solo se pueden leer, nunca modificar desde el cliente.
    match /appRoles/{roleId} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    // Servicios Públicos: Lectura pública, actualización muy limitada.
    match /publicServices/{serviceId} {
      allow read: if true;
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'appointmentDateTime', 'appointmentStatus', 'customerSignatureReception', 'customerSignatureDelivery']);
      allow create, delete: if false;
    }
    
    // Auditoría: Solo se puede leer, nunca escribir.
    match /auditLogs/{logId} {
        allow read: if hasPermission('audits:view');
        allow write: if false;
    }

    // --- REGLAS DE ACCESO GRANULAR ---

    // Inventario:
    match /inventoryItems/{itemId} {
      // Leer: Se divide en dos.
      // 1. Leer información pública (sin costos)
      allow read: if hasPermission('inventory:view_public_info');
      
      // Escribir:
      allow create: if hasPermission('inventory:manage');
      allow update: if hasPermission('inventory:manage') &&
                     // Regla de protección de stock: no se puede cambiar desde el cliente.
                     request.resource.data.stock == resource.data.stock;
    }
    
    // Compras a Proveedores:
    match /purchases/{purchaseId} {
        allow read, create, update: if hasPermission('purchases:manage');
        allow delete: if false; // Por seguridad, es mejor cancelar que borrar.
    }

    // Servicios: La regla más compleja.
    match /serviceRecords/{serviceId} {
      // Lectura:
      // Un técnico solo puede leer un servicio si NO contiene datos sensibles del cliente.
      // Un asesor o admin puede leer todo.
      allow read: if isSignedIn(); // Se controlará el acceso a campos específicos en las Cloud Functions

      // Escritura:
      allow create: if hasPermission('services:create');
      allow update: if hasPermission('services:edit');
      allow delete: if hasPermission('services:create'); // Usamos el mismo permiso para borrar cotizaciones
    }
    
    // Movimientos de inventario: Solo se pueden leer, son creados por el backend.
    match /inventoryMovements/{movementId} {
        allow read: if hasPermission('inventory:view_public_info');
        allow write: if false;
    }

    // Regla General de "Denegar por Defecto"
    // Cualquier otra colección no listada aquí no tendrá acceso.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
